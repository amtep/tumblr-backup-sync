#!/usr/bin/env python3

import argparse
import configparser
import os
import json
import re
import requests
import sys
import yaml

if os.path.exists("pytumblr/pytumblr/__init__.py"):
    sys.path.insert(1, os.path.dirname(__file__) + "/pytumblr")
import pytumblr

CREDENTIALS_PATH = "~/.tumblr"

def write_file(filename, content, text=True):
    mode = 'w' if text else 'wb'
    with open(filename, mode) as f:
        f.write(content)

class Config(configparser.ConfigParser):
    def __init__(self, storagedir):
        self.storagedir = storagedir
        self.inifile = os.path.join(storagedir, "tbs.ini")
        super().__init__(interpolation=None)
        self.read(self.inifile)

    def sync(self):
        with open(self.inifile, 'w') as f:
            self.write(f)

    def blog_key(self, blogname):
        return "blog/" + blogname

    def blog_section(self, blogname):
        key = self.blog_key(blogname)
        if self.has_section(key):
            return self[key]
        return None

    def blog_dir(self, blogname):
        subdir = self.blog_section(blogname)['Subdirectory']
        return os.path.join(self.storagedir, subdir)

    def init_blog(self, blogname):
        count = 1
        base_dirname = re.sub(r"[^a-zA-Z0-9.-]", "_", blogname)
        dirname = base_dirname
        while os.path.exists(os.path.join(self.storagedir, dirname)):
            count += 1
            dirname = "{0}_{1}".format(base_dirname, count)
        os.mkdir(os.path.join(self.storagedir, dirname))

        key = self.blog_key(blogname)
        self.add_section(key)
        self[key]['Subdirectory'] = dirname
        self.sync()

def make_arg_parser():
    parser = argparse.ArgumentParser(description="backup tool for tumblr blogs")
    parser.add_argument('--init', action='store_true', help="Initialize a new storage directory")
    parser.add_argument('--storagedir', default='.', metavar="DIR", help="The directory in which to store tumblr backups (default: current directory)")
    parser.add_argument('--credentials', metavar="FILE", default=os.path.expanduser(CREDENTIALS_PATH), help="A yaml file containing the tumblr API credentials (default: %s)" % CREDENTIALS_PATH)
    parser.add_argument('blogname', nargs='?', help="The name of the tumblr blog to back up")
    return parser

def init_storage_dir(storagedir):
    if os.path.isdir(storagedir):
        if os.listdir(storagedir):
            print("Storage directory not empty: {}".format(storagedir))
            print("Please specify an empty directory to initialize.")
            sys.exit(1)
    else:
        if os.path.isdir(os.path.dirname(storagedir)):
            os.mkdir(storagedir)
        else:
            print("Storage directory not found: {}".format(storagedir))
            sys.exit(1)
    write_file(os.path.join(storagedir, "tbs.ini"), "[General]\n")
    print("Initialized directory for storage: {}".format(storagedir))

def deep_prune(d, elim, elim_if_null):
    if isinstance(d, dict):
        for k in list(d):
            if k in elim:
                del d[k]
            elif d[k] is None and k in elim_if_null:
                del d[k]
            elif isinstance(d[k], (dict, list)):
                deep_prune(d[k], elim, elim_if_null)
    elif isinstance(d, list):
        for i in range(len(d)):
            deep_prune(d[i], elim, elim_if_null)

JUNK = set([
    "blog_name",
    "slug",
    "summary",
    "followed",
    "liked",
    "active",
    "theme",
    "share_likes",
    "share_following",
    "can_be_followed",
    "content_raw",
    "can_like",
    "can_reblog",
    "can_send_in_message",
    "can_reply",
    "display_avatar",
    "reblog"
])

NULL_JUNK = set([
    "recommended_source",
    "recommended_color",
])

def sync_post(tbsconfig, blogname, post):
    id = post['id']
    # Security: don't create pathnames with unvetted data
    if type(id) is not int:
        print("WARNING: skipping post with bad id value {}".format(id))
        return
    post_path = os.path.join(tbsconfig.blog_dir(blogname), str(id))
    if not os.path.isdir(post_path):
        os.mkdir(post_path)
    deep_prune(post, JUNK, NULL_JUNK)
    write_file(os.path.join(post_path, 'post.json'), json.dumps(post, indent=4))
    if post['tags']:
        tags = "".join(t + "\n" for t in post['tags'])
        write_file(os.path.join(post_path, 'tags'), tags)

def print_progress(label, sofar, total):
    percent = sofar * 100 / total
    print("\r{} ... {}/{} ({:.1f}%)".format(label, sofar, total, percent), end='\r')

def get_following(client, blogname):
    following = []
    offset = 0
    seen = set()
    limit = 20

    while True:
        resp = client.blog_following(blogname, offset=offset, limit=limit)
        offset += limit - 2
        for f in resp['blogs']:
            if f['name'] not in seen:
                following.append(f)
                seen.add(f['name'])
        print_progress("Following", len(seen), resp['total_blogs'])
        if len(resp['blogs']) == 0:
            break
    print()
    return following

def backup_blog(client, tbsconfig, blogname):
    print("Backing up {} ...".format(blogname))
    blogdir = tbsconfig.blog_dir(blogname)

    info = client.blog_info(blogname)['blog']
    print("Title ...")
    write_file(os.path.join(blogdir, 'title'), info['title'])
    print("Description ...")
    write_file(os.path.join(blogdir, 'description'), info['description'])

    print("Avatar ...")
    avatar_url = client.avatar(blogname, 512)['avatar_url']
    resp = requests.get(avatar_url)
    write_file(os.path.join(blogdir, 'avatar.png'), resp.content, text=False)

    print("Following ...", end='\r')
    following = "".join(f['name'] + "\n" for f in get_following(client, blogname))
    write_file(os.path.join(blogdir, 'following'), following)

    post_count = info['posts']
    posts_fetched = 0

    while posts_fetched < post_count:
        print_progress("Posts", posts_fetched, post_count)
        limit = 20
        offset = post_count - posts_fetched - limit
        if offset < 0:
            limit = 20 - offset
            offset = 0
        posts_info = client.posts(blogname, offset=offset, limit=limit)
        if posts_info['blog']['posts'] != post_count:
            # to avoid desyncing, just recalculate offset and retry
            post_count = posts_info['blog']['posts']
            continue
        posts_fetched += len(posts_info['posts'])
        for post in posts_info['posts']:
            sync_post(tbsconfig, blogname, post)
    print_progress("Posts", posts_fetched, post_count)
    print()

if __name__ == "__main__":
    parser = make_arg_parser()
    args = parser.parse_args()

    if args.init:
        init_storage_dir(args.storagedir)
        if not args.blogname:
            sys.exit(0)

    if not args.blogname:
        print("error: must specify tumblr blog name on command line")
        sys.exit(2)

    if '.' not in args.blogname:
        args.blogname += ".tumblr.com"

    tbsconfig = Config(args.storagedir)
    if tbsconfig.blog_section(args.blogname) is None:
        print("Initializing storage for {}".format(args.blogname))
        tbsconfig.init_blog(args.blogname)

    print("Loading credentials from {0} ...".format(args.credentials))
    try:
        with open(args.credentials) as f:
            credentials = yaml.safe_load(f)
    except OSError as e:
        print("{0}".format(e))
        sys.exit(1)

    client = pytumblr.TumblrRestClient(
        credentials['consumer_key'],
        credentials['consumer_secret'],
        credentials['oauth_token'],
        credentials['oauth_token_secret']
    )

    backup_blog(client, tbsconfig, args.blogname)
